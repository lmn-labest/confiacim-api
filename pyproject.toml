[tool.poetry]
name = "confiacim-api"
version = "0.1.0"
description = "Api para o confiacim-core"
authors = ["Henrique C. C. de Andrade <henrique.ccda@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
fastapi = "^0.111.0"
uvicorn = "^0.30.1"
gunicorn = "^22.0.0"
sqlalchemy = "^2.0.25"
pydantic-settings = "^2.1.0"
celery = {extras = ["redis"], version = "^5.3.6"}
flower = "^2.0.1"
psycopg = "^3.1.18"
alembic = "^1.13.1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
types-passlib = "^1.7.7.20240327"
pyjwt = "^2.8.0"
python-multipart = "^0.0.9"
pydantic = {extras = ["email"], version = "^2.7.3"}
typer = "^0.12.3"
python-slugify = "^8.0.4"

confiacim = {path = "packages/confiacim-0.12.0a0-py3-none-any.whl"}
[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
black = "^24.4.2"
ruff = "^0.4.8"
taskipy = "^1.12.2"
mypy = "^1.8.0"
coverage = "^7.4.0"
pytest-cov = "^5.0.0"
httpx = "^0.27.0"
ipdb = "^0.13.13"
ipython = "^8.20.0"
pytest-mock = "^3.12.0"
pytest-randomly = "^3.15.0"
pre-commit = "^3.6.0"
poetry-plugin-export = "^1.7.1"
freezegun = "^1.5.1"
factory-boy = "^3.3.0"
pytest-xdist = "^3.6.1"

watchfiles = "0.21.0"
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
confiacim-admin = "confiacim_api.cli:app"


[tool.black]
line-length = 120
exclude = '''
/(
      \.eggs
    | \.git
    | \.venv
)/
'''

[tool.pytest.ini_options]
addopts = "-ra -vv"

filterwarnings = "ignore::DeprecationWarning"

testpaths = [
    "tests",
    "--strict-markers",
]

markers=[
    "cli: marks CLI tests",
    "unit: marks unity tests",
    "integration: marks integration testes",
    "slow: Slow test",
]

[tool.ruff]
line-length = 120

exclude = [
    ".venv"
]

[tool.ruff.lint]

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "celery",
    "celery.result",
    "factory",
    "routers",
]
ignore_missing_imports = true


[tool.taskipy.variables]
src = "confiacim_api"

[tool.taskipy.tasks]
fmt_black = {cmd="poetry run black {src} tests", help="Chamando do black.", use_vars = true}
fmt_ruff= {cmd="poetry run ruff check {src} tests --fix", help="Chamando do ruff.", use_vars = true}

fmt = {cmd="task fmt_ruff && task fmt_black", help="Formatador do código."}

lin_ruff = {cmd="poetry run ruff check {src} tests", help="Linter com o Ruff.", use_vars = true}

lin_mypy = {cmd="mypy --package tests --package {src}", help="Analisador estático de tipos.", use_vars = true}

linter = {cmd="task lin_ruff && task lin_mypy", help="Linter."}

tests = {cmd="pytest --cov={src}", help="Rodando os testes.", use_vars = true}
tests_report = {cmd="pytest --cov-report html --cov={src}", help="Rodando os testes com cobertura.", use_vars = true}

report_server = {cmd="python -m http.server 8001 -d htmlcov", help="Mostrando o relatorio de cobertura de teste."}

clean = {cmd="rm -rvf .ruff_cache && rm -v .coverage && rm -rfv .pytest_cache && rm -rvf htmlcov && find confiacim-api -name '*.pyc' -exec rm -vf {} \\;", help="Limpa o projeto."}

server_api = {cmd="uvicorn confiacim_api.app:app --reload", help="Subindo o servidor local uvicorn."}

up_db = {cmd="docker compose -f docker-compose-dev.yml up database -d", help="Subindo o contanier do DB."}
down_db = {cmd="docker compose -f docker-compose-dev.yml down database", help="Parando o contanier do DB."}

up_services = {cmd="docker compose -f docker-compose-dev.yml up database sentinel redis-master worker_1 worker_2 flower -d", help="Subindo todos os serviços."}
down_services = {cmd="docker compose -f docker-compose-dev.yml down database sentinel redis-master worker_1 worker_2 flower", help="Parando todos os serviços."}
